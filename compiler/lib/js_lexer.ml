(* Js_of_ocaml compiler
 * Copyright (C) 2013 Hugo Heuzard
 *)
(* Yoann Padioleau
 *
 * Copyright (C) 2010 Facebook
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation, with the
 * special exception on linking described in file license.txt.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the file
 * license.txt for more details.
 *)

open Js_token

let tok lexbuf = Lexing.lexeme lexbuf

let keyword_table =
  let h = Hashtbl.create 17 in
  List.iter
    (fun (s, f) -> Hashtbl.add h s f)
    [ ("catch", fun ii -> T_CATCH ii)
    ; ("finally", fun ii -> T_FINALLY ii)
    ; ("in", fun ii -> T_IN ii)
    ; ("instanceof", fun ii -> T_INSTANCEOF ii)
    ; ("else", fun ii -> T_ELSE ii)
    ; ("while", fun ii -> T_WHILE ii)
    ; ("break", fun ii -> T_BREAK ii)
    ; ("case", fun ii -> T_CASE ii)
    ; ("continue", fun ii -> T_CONTINUE ii)
    ; ("default", fun ii -> T_DEFAULT ii)
    ; ("delete", fun ii -> T_DELETE ii)
    ; ("do", fun ii -> T_DO ii)
    ; ("else", fun ii -> T_ELSE ii)
    ; ("for", fun ii -> T_FOR ii)
    ; ("function", fun ii -> T_FUNCTION ii)
    ; ("if", fun ii -> T_IF ii)
    ; ("new", fun ii -> T_NEW ii)
    ; ("return", fun ii -> T_RETURN ii)
    ; ("switch", fun ii -> T_SWITCH ii)
    ; ("this", fun ii -> T_THIS ii)
    ; ("throw", fun ii -> T_THROW ii)
    ; ("try", fun ii -> T_TRY ii)
    ; ("typeof", fun ii -> T_TYPEOF ii)
    ; ("var", fun ii -> T_VAR ii)
    ; ("void", fun ii -> T_VOID ii)
    ; ("while", fun ii -> T_WHILE ii)
    ; ("with", fun ii -> T_WITH ii)
    ; ("null", fun ii -> T_NULL ii)
    ; ("false", fun ii -> T_FALSE ii)
    ; ("true", fun ii -> T_TRUE ii)
    ; ("debugger", fun ii -> T_DEBUGGER ii) ] ;
  h

let __ocaml_lex_tables =
  { Lexing.lex_base=
      "\000\000\197\255\198\255\200\255\081\000\103\000\160\000\207\255\003\000\031\000\035\000\083\000\100\000\078\000\081\000\084\000\085\000\127\000\109\000\241\255\242\255\243\255\244\255\235\000\246\255\247\255\248\255\249\255\250\255\251\255\252\255\001\000\003\000\120\000\199\255\153\000\255\255\245\000\011\001\021\001\031\001\220\255\240\255\219\255\239\255\087\000\238\255\103\000\237\255\104\000\236\255\230\255\107\000\235\255\110\000\228\255\227\255\224\255\232\255\223\255\231\255\222\255\221\255\218\255\043\001\055\001\065\001\120\001\102\000\252\255\253\255\143\001\181\001\255\255\204\001\254\255\242\001\009\002\047\002\161\000\251\255\252\255\004\000\255\255\254\255\129\000\251\255\252\255\253\255\254\255\047\000\255\255\214\000\252\255\253\255\048\000\255\255\254\255\053\002\166\002\251\255\167\002\254\255\005\000\126\000\255\255\139\000\166\000\169\002\179\002\116\001\255\255"
  ; Lexing.lex_backtrk=

  ; Lexing.lex_default=

  ; Lexing.lex_trans=

  ; Lexing.lex_check=

  ; Lexing.lex_base_code=

  ; Lexing.lex_backtrk_code=

  ; Lexing.lex_default_code=

  ; Lexing.lex_trans_code=

  ; Lexing.lex_check_code=

  ; Lexing.lex_code= "\255\002\255\255\003\255\255\000\002\001\003\255" }

let rec initial tokinfo prev lexbuf =
  __ocaml_lex_initial_rec tokinfo prev lexbuf 0

and __ocaml_lex_initial_rec tokinfo prev lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let info = tokinfo lexbuf in
      let buf = Buffer.create 127 in
      let nl = ref false in
      st_comment buf nl lexbuf ;
      let content = Buffer.contents buf in
      if !nl then TCommentML (info, content) else TComment (info, content)
  | 1 ->
      let cmt =
        Lexing.sub_lexeme lexbuf
          (lexbuf.Lexing.lex_start_pos + 2)
          lexbuf.Lexing.lex_curr_pos
      in
      TComment (tokinfo lexbuf, cmt)
  | 2 ->
      let cmt =
        Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos
          lexbuf.Lexing.lex_curr_pos
      in
      TCommentSpace (tokinfo lexbuf, cmt)
  | 3 ->
      lexbuf.Lexing.lex_curr_p
      <- { lexbuf.Lexing.lex_curr_p with
           Lexing.pos_lnum= lexbuf.Lexing.lex_curr_p.Lexing.pos_lnum + 1 } ;
      TCommentNewline (tokinfo lexbuf, "")
  | 4 -> T_LCURLY (tokinfo lexbuf)
  | 5 -> T_RCURLY (tokinfo lexbuf)
  | 6 -> T_LPAREN (tokinfo lexbuf)
  | 7 -> T_RPAREN (tokinfo lexbuf)
  | 8 -> T_LBRACKET (tokinfo lexbuf)
  | 9 -> T_RBRACKET (tokinfo lexbuf)
  | 10 -> T_PERIOD (tokinfo lexbuf)
  | 11 -> T_SEMICOLON (tokinfo lexbuf)
  | 12 -> T_COMMA (tokinfo lexbuf)
  | 13 -> T_COLON (tokinfo lexbuf)
  | 14 -> T_PLING (tokinfo lexbuf)
  | 15 -> T_AND (tokinfo lexbuf)
  | 16 -> T_OR (tokinfo lexbuf)
  | 17 -> T_STRICT_EQUAL (tokinfo lexbuf)
  | 18 -> T_STRICT_NOT_EQUAL (tokinfo lexbuf)
  | 19 -> T_LESS_THAN_EQUAL (tokinfo lexbuf)
  | 20 -> T_GREATER_THAN_EQUAL (tokinfo lexbuf)
  | 21 -> T_EQUAL (tokinfo lexbuf)
  | 22 -> T_NOT_EQUAL (tokinfo lexbuf)
  | 23 -> (
      let cpi = tokinfo lexbuf in
      match prev with
      | Some p
        when (Js_token.info_of_tok p).Parse_info.line = cpi.Parse_info.line ->
          T_INCR_NB cpi
      | _ -> T_INCR cpi )
  | 24 -> (
      let cpi = tokinfo lexbuf in
      match prev with
      | Some p
        when (Js_token.info_of_tok p).Parse_info.line = cpi.Parse_info.line ->
          T_DECR_NB cpi
      | _ -> T_DECR cpi )
  | 25 -> T_LSHIFT_ASSIGN (tokinfo lexbuf)
  | 26 -> T_LSHIFT (tokinfo lexbuf)
  | 27 -> T_RSHIFT_ASSIGN (tokinfo lexbuf)
  | 28 -> T_RSHIFT3_ASSIGN (tokinfo lexbuf)
  | 29 -> T_RSHIFT3 (tokinfo lexbuf)
  | 30 -> T_RSHIFT (tokinfo lexbuf)
  | 31 -> T_PLUS_ASSIGN (tokinfo lexbuf)
  | 32 -> T_MINUS_ASSIGN (tokinfo lexbuf)
  | 33 -> T_MULT_ASSIGN (tokinfo lexbuf)
  | 34 -> T_MOD_ASSIGN (tokinfo lexbuf)
  | 35 -> T_BIT_AND_ASSIGN (tokinfo lexbuf)
  | 36 -> T_BIT_OR_ASSIGN (tokinfo lexbuf)
  | 37 -> T_BIT_XOR_ASSIGN (tokinfo lexbuf)
  | 38 -> T_LESS_THAN (tokinfo lexbuf)
  | 39 -> T_GREATER_THAN (tokinfo lexbuf)
  | 40 -> T_PLUS (tokinfo lexbuf)
  | 41 -> T_MINUS (tokinfo lexbuf)
  | 42 -> T_MULT (tokinfo lexbuf)
  | 43 -> T_MOD (tokinfo lexbuf)
  | 44 -> T_BIT_OR (tokinfo lexbuf)
  | 45 -> T_BIT_AND (tokinfo lexbuf)
  | 46 -> T_BIT_XOR (tokinfo lexbuf)
  | 47 -> T_NOT (tokinfo lexbuf)
  | 48 -> T_BIT_NOT (tokinfo lexbuf)
  | 49 -> T_ASSIGN (tokinfo lexbuf)
  | 50 -> (
      let s = tok lexbuf in
      let info = tokinfo lexbuf in
      try
        let f = Hashtbl.find keyword_table s in
        f info
      with Not_found -> T_IDENTIFIER (s, info) )
  (* need case insensitive ? *)
  | 51 ->
      let s = tok lexbuf in
      let info = tokinfo lexbuf in
      T_NUMBER (s, Int64.(to_float (of_string s)), info)
  | 52 ->
      let s = tok lexbuf in
      let s' = String.sub s 1 (String.length s - 1) in
      let info = tokinfo lexbuf in
      T_NUMBER (s, Int64.(to_float (of_string ("0o" ^ s'))), info)
  | 53 ->
      let s = tok lexbuf in
      let info = tokinfo lexbuf in
      T_NUMBER (s, float_of_string s, info)
  | 54 ->
      let s = tok lexbuf in
      let info = tokinfo lexbuf in
      T_NUMBER (s, float_of_string s, info)
  | 55 ->
      let quote =
        Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos
      in
      let info = tokinfo lexbuf in
      let buf = Buffer.create 127 in
      string_quote quote buf lexbuf ;
      let s = Buffer.contents buf in
      (* s does not contain the enclosing "'" but the info does *)
      T_STRING (s, info)
  | 56 -> (
      let s = tok lexbuf in
      let info = tokinfo lexbuf in
      match prev with
      | Some
          ( T_IDENTIFIER _ | T_NUMBER _ | T_STRING _ | T_REGEX _ | T_FALSE _
          | T_TRUE _ | T_NULL _ | T_THIS _ | T_INCR _ | T_DECR _
          | T_RBRACKET _ | T_RPAREN _ ) -> (
        match s with
        | "/" -> T_DIV info
        | "/=" -> T_DIV_ASSIGN info
        | _ -> assert false )
      | _ ->
          let buf = Buffer.create 127 in
          Buffer.add_string buf s ;
          regexp buf lexbuf ;
          T_REGEX (Buffer.contents buf, info) )
  (* raise (Token t); *)
  | 57 -> EOF (tokinfo lexbuf)
  | 58 -> TUnknown (tokinfo lexbuf, tok lexbuf)
  | (* Format.eprintf "LEXER:unrecognised symbol, in token rule: %s@." (tok
       lexbuf); *)
  __ocaml_lex_state ->
      lexbuf.Lexing.refill_buff lexbuf ;
      __ocaml_lex_initial_rec tokinfo prev lexbuf __ocaml_lex_state

and string_escape quote buf lexbuf =
  __ocaml_lex_string_escape_rec quote buf lexbuf 68

and __ocaml_lex_string_escape_rec quote buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> Buffer.add_string buf "\\\\"
  | 1 ->
      Buffer.add_char buf '\\' ;
      Buffer.add_string buf (Lexing.lexeme lexbuf)
  | 2 ->
      let c = Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
      if c <> '\'' && c <> '\"' then Buffer.add_char buf '\\' ;
      Buffer.add_char buf c
  | 3 ->
      Format.eprintf "LEXER: WIERD end of file in string_escape@." ;
      ()
  | __ocaml_lex_state ->
      lexbuf.Lexing.refill_buff lexbuf ;
      __ocaml_lex_string_escape_rec quote buf lexbuf __ocaml_lex_state

and string_quote q buf lexbuf = __ocaml_lex_string_quote_rec q buf lexbuf 79

and __ocaml_lex_string_quote_rec q buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let q' = Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
      if q = q'
      then ()
      else ( Buffer.add_char buf q' ; string_quote q buf lexbuf )
  | 1 -> string_quote q buf lexbuf
  | 2 ->
      string_escape q buf lexbuf ;
      string_quote q buf lexbuf
  | 3 ->
      let x = Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
      Buffer.add_char buf x ; string_quote q buf lexbuf
  | 4 ->
      Format.eprintf "LEXER: WIERD end of file in quoted string@." ;
      ()
  | __ocaml_lex_state ->
      lexbuf.Lexing.refill_buff lexbuf ;
      __ocaml_lex_string_quote_rec q buf lexbuf __ocaml_lex_state

and regexp buf lexbuf = __ocaml_lex_regexp_rec buf lexbuf 85

and __ocaml_lex_regexp_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let x =
        Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1)
      in
      Buffer.add_char buf '\\' ; Buffer.add_char buf x ; regexp buf lexbuf
  | 1 ->
      Buffer.add_char buf '/' ;
      regexp_maybe_ident buf lexbuf
  | 2 -> Buffer.add_char buf '[' ; regexp_class buf lexbuf
  | 3 ->
      let x = Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
      Buffer.add_char buf x ; regexp buf lexbuf
  | 4 ->
      Format.eprintf "LEXER: WIERD end of file in regexp@." ;
      ()
  | __ocaml_lex_state ->
      lexbuf.Lexing.refill_buff lexbuf ;
      __ocaml_lex_regexp_rec buf lexbuf __ocaml_lex_state

and regexp_class buf lexbuf = __ocaml_lex_regexp_class_rec buf lexbuf 92

and __ocaml_lex_regexp_class_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> Buffer.add_char buf ']' ; regexp buf lexbuf
  | 1 ->
      let x =
        Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_start_pos + 1)
      in
      Buffer.add_char buf '\\' ;
      Buffer.add_char buf x ;
      regexp_class buf lexbuf
  | 2 ->
      let x = Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
      Buffer.add_char buf x ; regexp_class buf lexbuf
  | 3 ->
      Format.eprintf "LEXER: WIERD end of file in regexp_class@." ;
      ()
  | __ocaml_lex_state ->
      lexbuf.Lexing.refill_buff lexbuf ;
      __ocaml_lex_regexp_class_rec buf lexbuf __ocaml_lex_state

and regexp_maybe_ident buf lexbuf =
  __ocaml_lex_regexp_maybe_ident_rec buf lexbuf 98

and __ocaml_lex_regexp_maybe_ident_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> Buffer.add_string buf (tok lexbuf)
  | __ocaml_lex_state ->
      lexbuf.Lexing.refill_buff lexbuf ;
      __ocaml_lex_regexp_maybe_ident_rec buf lexbuf __ocaml_lex_state

and st_comment buf nl lexbuf = __ocaml_lex_st_comment_rec buf nl lexbuf 99

and __ocaml_lex_st_comment_rec buf nl lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 -> Buffer.add_string buf (tok lexbuf)
  | 1 ->
      Buffer.add_string buf (tok lexbuf) ;
      nl := true ;
      st_comment buf nl lexbuf
  | 2 ->
      Buffer.add_string buf (tok lexbuf) ;
      st_comment buf nl lexbuf
  | 3 -> Buffer.add_char buf '*' ; st_comment buf nl lexbuf
  | 4 ->
      Format.eprintf "LEXER: end of file in comment@." ;
      Buffer.add_string buf "*/"
  | 5 ->
      let s = tok lexbuf in
      Format.eprintf "LEXER: unrecognised symbol in comment: %s@." s ;
      Buffer.add_string buf s ;
      st_comment buf nl lexbuf
  | __ocaml_lex_state ->
      lexbuf.Lexing.refill_buff lexbuf ;
      __ocaml_lex_st_comment_rec buf nl lexbuf __ocaml_lex_state

and pos lexbuf =
  lexbuf.Lexing.lex_mem <- Array.make 4 (-1) ;
  __ocaml_lex_pos_rec lexbuf 106

and __ocaml_lex_pos_rec lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
  | 0 ->
      let line =
        Lexing.sub_lexeme lexbuf
          (lexbuf.Lexing.lex_mem).(0)
          (lexbuf.Lexing.lex_mem).(1)
      and quote =
        Lexing.sub_lexeme_char lexbuf (lexbuf.Lexing.lex_curr_pos + -1)
      in
      let buf = Buffer.create 127 in
      string_quote quote buf lexbuf ;
      Buffer.contents buf, int_of_string line
  | __ocaml_lex_state ->
      lexbuf.Lexing.refill_buff lexbuf ;
      __ocaml_lex_pos_rec lexbuf __ocaml_lex_state
